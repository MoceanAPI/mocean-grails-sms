buildscript {
    repositories {
       maven { url "https://repo.grails.org/grails/core" }
       maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.0.10"
        classpath "io.github.gradle-nexus:publish-plugin:1.0.0"
    }
}


version "1.0.0"
group "org.grails.plugins"


apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"


ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : (System.getenv('SIGNING_PASSPHRASE')?:"${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")

repositories {
    maven { url "https://repo.grails.org/grails/core" }
    mavenLocal()
}

group 'com.github.moceanapi'
version '1.0.0'

publishing {
    publications {
        maven(MavenPublication) {
           groupId = project.group
           artifactId = 'mocean-grails-sms'
           version = project.version

           from components.java
           artifact sourcesJar
           artifact javadocJar

           pom {
               name = 'MoceanAPI Grails SMS'
               description = 'This plugin allows helps you to incorporate SMS notification into your workflow.'
               url = 'https://github.com/MoceanAPI/mocean-grails-sms'
               licenses {
                   license {
                       name = 'The Apache License, Version 2.0'
                       url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                   }
               }
               developers {
                   developer {
                       id = 'microoceantechnologies'
                       name = 'Micro Ocean Technologies Sdn Bhd'
                       email = 'support@moceanapi.com'
                   }
               }
               scm {
                   connection = 'scm:git:git://github.com/MoceanAPI/mocean-grails-sms.git'
                   developerConnection = 'scm:git:ssh://github.com/MoceanAPI/mocean-grails-sms.git'
                   url = 'https://github.com/MoceanAPI/mocean-grails-sms/tree/main'
               }
           }
       }
    }
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.10"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "org.grails:grails-web-testing-support"
    String httpclientVersion = '4.3.6'
    compile "org.apache.httpcomponents:httpclient:$httpclientVersion"
    compile "org.apache.httpcomponents:fluent-hc:$httpclientVersion"
    compile "org.apache.httpcomponents:httpclient-cache:$httpclientVersion"
    compile "org.apache.httpcomponents:httpmime:$httpclientVersion"
    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.1')
}

assets {
    packagePlugin = true
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        useGpgCmd()
        sign publishing.publications.maven

    }
}

tasks.withType(Sign) {
   onlyIf { isReleaseVersion }
}

nexusPublishing {
   repositories {
       sonatype {
           def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
           def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
           def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
           nexusUrl = uri("https://oss.sonatype.org/service/local/")
           snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
           username = ossUser
           password = ossPass
           stagingProfileId = ossStagingProfileId
       }
   }
}